StmLst -> 
StmLst -> StmLst Stm

Stm -> '#' 'include' qstring : Include(3)
Stm -> '#' 'include' '<' Filename '>' : Include(4)

Filename -> ident '.' ident
Filename -> ident '/' Filename

Stm -> '#' 'ifdef' ident : Ifdef(3)
Stm -> '#' 'ifndef' ident : Ifndef(3)
Stm -> '#' 'endif' : Endif

Stm -> '#' 'define' DefineName DefineBody eol: Define(3,4)

DefineName -> ident : DefineName(1)
DefineName -> ident '(' ')': DefineName(1)
DefineName -> ident '(' DefineArgLst ')': DefineName(1)
DefineArgLst -> ident : DefineArg(1)
DefineArgLst -> DefineArgLst ',' ident : DefineArg(1,3)

DefineBody -> : DefineBody
DefineBody -> DefineBody '\\' eol : pass(1)
DefineBody -> DefineBody any: DefineBody(1,2)

Block -> '{' BlockContent '}' : null
BlockContent -> : null
BlockContent -> BlockContent Block : null
BlockContent -> BlockContent any : null

Stm -> 'typedef' SingleVarDecl ';': Typedef(2)

SingleVarDecl -> QualifiedType DecoratedVar : Decl(1,2)

QualifiedType -> Type : Type(1)
QualifiedType -> TypeQualifiers Type : Type(1,2)

TypeQualifiers -> TypeQualifier : TypeQualifiers(1)
TypeQualifiers -> TypeQualifiers TypeQualifier: TypeQualifiers(1,2)

TypeQualifier -> 'const' : pass
TypeQualifier -> 'extern' : pass
TypeQualifier -> 'static' : pass

Type -> ident

DecoratedVar -> '*' DecoratedVar  : PointerTo(2)
DecoratedVar -> '*' 'const' DecoratedVar  : ConstPointerTo(2)
DecoratedVar -> DecoratedVar2 : pass

DecoratedVar2 -> DecoratedVar2 '[' ']': ArrayOf(1)
DecoratedVar2 -> DecoratedVar2 '[' ConstExpression ']': ArrayOf(1,3)
DecoratedVar2 -> DecoratedVar2 '('  ')': FunctionReturning(1)
DecoratedVar2 -> DecoratedVar2 '('  ParamLst ')': FunctionReturning(1,3)

DecoratedVar2 -> ident : Var(1)
DecoratedVar2 -> '(' DecoratedVar ')' : pass(2)

ConstExpression -> int : pass
ConstExpression -> ident : pass

ParamLst -> 'void' : ParamLst(1)
ParamLst -> SingleVarDecl : ParamLst(1)
ParamLst -> ParamLst ',' SingleVarDecl : ParamLst(1,3)

DeclStm -> QualifiedType DecoratedVarLst ';' : Declaration(1,2)
DeclStm -> QualifiedType DecoratedVarLst '=' Initializer ';' : Declaration(1,2,4)

Stm -> DeclStm : pass

DecoratedVarLst -> DecoratedVar : DecoratedVarLst(1)
DecoratedVarLst -> DecoratedVarLst ',' DecoratedVar : DecoratedVarLst(1,3)

Stm -> QualifiedType DecoratedVar Block : FunctionDeclaration(1,2)

Type -> 'struct' sname '{' FieldList '}' : Struct(2,4)
sname -> ident : pass
sname -> : NoName
FieldList -> DeclStm : FieldList(1)
FieldList -> FieldList DeclStm : FieldList(1,2)

Initializer -> ident : pass
Initializer -> qstring : pass
Initializer -> number : pass
